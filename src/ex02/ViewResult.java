package ex02;

import ex01.DigitsNumberDTO;
import ex01.Item2d;
import java.io.*;
import java.util.ArrayList;

/**
 * ConcreteProduct
 * (?????? ??????????????
 * Factory Method)<br>
 * ?????????? ???????,
 * ?????????? ? ???????????
 * ???????????
 *
 * @author Vitaliy
 * @version 1.0
 * @see View
 */
@SuppressWarnings("SpellCheckingInspection")
public class ViewResult implements View {
    /**
     * ??? ?????, ???????????? ??? ????????????
     */
    private static final String FNAME = "items.bin";
    /**
     * ?????????? ?????????? ???????? ??? ?????????? ?? ?????????
     */
    private static final int DEFAULT_NUM = 10;
    /**
     * ????????? ?????????? ? ??????????? ??????????
     */
    private ArrayList<Item2d> items = new ArrayList<Item2d>();

    /**
     * ???????? {@linkplain ViewResult#ViewResult(int n) ViewResult(int n)}
     * ? ?????????? {@linkplain ViewResult#DEFAULT_NUM DEFAULT_NUM}
     */
    public ViewResult() {
        this(DEFAULT_NUM);
    }

    /**
     * ?????????????? ????????? {@linkplain ViewResult#items}
     *
     * @param n ????????? ?????????? ?????????
     */
    public ViewResult(int n) {
        for (int ctr = 0; ctr < n; ctr++) {
            items.add(new Item2d());
        }
    }

    /**
     * ???????? ???????? {@linkplain ViewResult#items}
     *
     * @return ??????? ???????? ?????? ?? ?????? {@linkplain ArrayList}
     */
    public ArrayList<Item2d> getItems() {
        return items;
    }

    /**
     * ????????? ???????? ???????
     * <p>
     *
     * @param decimalNumber ???????? ??????????? ???????
     * @return ????????? ?????????? ???????
     */
    private DigitsNumberDTO calc(int decimalNumber) {
        return new DigitsNumberDTO(Integer.toOctalString(decimalNumber).length(), Integer.toHexString(decimalNumber).length());
    }

    /**
     * ????????? ???????? ??????? ? ?????????
     * ????????? ? ????????? {@linkplain ViewResult#items}
     *
     * @param step ??? ?????????? ?????????
     */
    public void init(int step) {
        int decimalNumber = 0;
        for (Item2d item : items) {
            DigitsNumberDTO numbers = calc(decimalNumber);
            item.setAll(decimalNumber, numbers.digitsNumberOct, numbers.digitsNumberHex);
            decimalNumber += step;
        }
    }

    /**
     * ???????? <b>init(double stepX)</b> ?? ????????? ????????? ?????????<br>
     * {@inheritDoc}
     */
    @Override
    public void viewInit() {
        init((int)(Math.random() * 1000));
    }

    /**
     * ?????????? ?????? {@linkplain View#viewSave()}<br>
     * {@inheritDoc}
     */
    @Override
    public void viewSave() throws IOException {
        ObjectOutputStream os = new ObjectOutputStream(new FileOutputStream(FNAME));
        os.writeObject(items);
        os.flush();
        os.close();
    }

    /**
     * ?????????? ?????? {@linkplain View#viewRestore()}<br>
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
    @Override
    public void viewRestore() throws Exception {
        ObjectInputStream is = new ObjectInputStream(new FileInputStream(FNAME));
        items = (ArrayList<Item2d>) is.readObject();
        is.close();
    }

    /**
     * ?????????? ?????? {@linkplain View#viewHeader()}<br>
     * {@inheritDoc}
     */
    @Override
    public void viewHeader() {
        System.out.println("Results:");
    }

    /**
     * ?????????? ?????? {@linkplain View#viewBody()}<br>
     * {@inheritDoc}
     */
    @Override
    public void viewBody() {
        for (Item2d item : items) {
            System.out.printf("(%d; %d; %d) ", item.getDecimalNumber(), item.getDigitsNumberOct(), item.getDigitsNumberHex());
        }
        System.out.println();
    }

    /**
     * ?????????? ?????? {@linkplain View#viewFooter()}<br>
     * {@inheritDoc}
     */
    @Override
    public void viewFooter() {
        System.out.println("End.");
    }

    /**
     * ?????????? ?????? {@linkplain View#viewShow()}<br>
     * {@inheritDoc}
     */
    @Override
    public void viewShow() {
        viewHeader();
        viewBody();
        viewFooter();
    }
}